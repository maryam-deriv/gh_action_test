name: on_master

on:
  workflow_call:

env:
  BASE_IMAGE_REPO:   "maryamdrv/base-image"
  BASE_IMAGE_TAG:     1.8
  SERVICE_IMAGE_REPO: "maryamdrv/my-simple-image"
  SERVICE_IMAGE_TAG:  "1.27"
  SERVICE_FILE_PATH:  "service-image-digest.txt"
  BASE_FILE_PATH:     "base-image-digest.txt"

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:

      - name: Check out the repository
        uses: actions/checkout@v4

      - name: echo
        run: |
          echo "hello" 
          echo ${{ github.event.pull_request.head.sha }}
          echo ${{ github.sha }}
          echo ${{ github.event.pull_request.base.sha }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: maryamdrv
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get BASE_IMAGE_TAG from deployment script
        id: get-base-image-tag
        run: |
          cd $GITHUB_WORKSPACE

          echo "BASE_IMAGE_TAG=$(./build_docker_image.sh get_base_image_tag)" >> $GITHUB_ENV

      - name: Check file paths exist
        id: check_file_path
        run: |
           cd $GITHUB_WORKSPACE
           echo $BASE_IMAGE_TAG
           # Handle base image digest file
           if [ ! -f $BASE_FILE_PATH ]; then
            touch $BASE_FILE_PATH
           fi

           # Handle service image digest file
           if [ ! -f $SERVICE_FILE_PATH ]; then
            touch $SERVICE_FILE_PATH
           fi

      - name: Check if base image digest exists in the file
        id: check_base_digest
        run: |
          # Attempt to retrieve the base image digest
          BASE_IMAGE_DIGEST=$(docker manifest inspect $BASE_IMAGE_REPO:$BASE_IMAGE_TAG --verbose 2>/dev/null | jq -r '.Descriptor.digest')

          if [[ $? -ne 0 || -z "$BASE_IMAGE_DIGEST" ]]; then
            echo "No digest found."
            echo "digest_exists=false" >> $GITHUB_ENV
          else
            echo "Searching for: $BASE_IMAGE_REPO@$BASE_IMAGE_DIGEST"
            if grep -q "$BASE_IMAGE_REPO@$BASE_IMAGE_DIGEST" "$BASE_FILE_PATH"; then
              echo "Base image digest found in the file."
              echo "digest_exists=true" >> $GITHUB_ENV
            else
              echo "Base image digest not found in the file."
              echo "digest_exists=false" >> $GITHUB_ENV
            fi
          fi

      - name: Build base Docker image
        id: build_base_image
        run: |
         if [[ $digest_exists == 'true' ]]; then
            BASE_IMAGE_DIGEST=$(docker manifest inspect $BASE_IMAGE_REPO:$BASE_IMAGE_TAG --verbose 2>/dev/null | jq -r '.Descriptor.digest')
            docker image pull $BASE_IMAGE_REPO@$BASE_IMAGE_DIGEST
         else
            ./build_docker_image.sh build_base_image
         fi 

      - name: Push base Docker image
        if: env.digest_exists == 'false'
        run: |
          docker push $BASE_IMAGE_REPO:$BASE_IMAGE_TAG   
          
      - name: Get base Docker image digest
        if: env.digest_exists == 'false'
        id: id_get_base_digest
        run: |
          BASE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $BASE_IMAGE_REPO:$BASE_IMAGE_TAG)
          if [ -z "$BASE_DIGEST" ]; then
            echo "Failed to retrieve digest for $BASE_IMAGE_REPO:$BASE_IMAGE_TAG"
            exit 1
          fi
          echo "base_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT

      - name: Check if service image tag exists
        id: check_service_tag
        run: |
          if docker manifest inspect "$SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG" > /dev/null 2>&1; then
            echo "image tag already exists"
            exit 1
          else
            echo "image tag does not exist"
          fi
      - name: Build service Docker image
        id: build_service_image
        run: |
          ./build_docker_image.sh build_service_image

      - name: Push service Docker image
        run: |
          docker push $SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG   
          
      - name: Get service Docker image digest
        id: id_get_service_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG)
          if [ -z "$DIGEST" ]; then
            echo "Failed to retrieve digest for $SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG"
            exit 1
          fi
          DIGEST_ONLY="${DIGEST#*@}"
          # Format as reponame:tag@digest
          SERVICE_IMAGE_WITH_DIGEST="$SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG@$DIGEST_ONLY"
          echo "service_digest=$SERVICE_IMAGE_WITH_DIGEST" >> $GITHUB_OUTPUT
          
      - name: Update file with image digest
        run: |
          SERVICE_IMAGE_DIGEST=${{ steps.id_get_service_digest.outputs.service_digest }}
          cd $GITHUB_WORKSPACE
          echo $SERVICE_IMAGE_DIGEST
          echo $SERVICE_IMAGE_REPO:$SERVICE_IMAGE_TAG@$SERVICE_IMAGE_DIGEST
          echo "$SERVICE_IMAGE_DIGEST" >> $SERVICE_FILE_PATH

          if [[ $digest_exists == 'false' ]]; then
            BASE_IMAGE_DIGEST=${{ steps.id_get_base_digest.outputs.base_digest }}
            echo "$BASE_IMAGE_DIGEST" >> $BASE_FILE_PATH
          fi

      - name: Commit and push image digest
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          branch_name="update-image-digest"-${{ github.sha }}
          git checkout -b $branch_name

          git add $SERVICE_FILE_PATH $BASE_FILE_PATH
          git commit -m "Update Docker image digest [ci skip]"

          # Set remote by authenticating with GITHUB_TOKEN
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

          # Push changes to new branch
          git push origin HEAD:${branch_name}

          # Create a pull request using Github CLI
          gh pr create --title "Update new docker image digest" --body "This PR updates the new Docker image digest." --head ${branch_name} --base master

          # Fetch the PR number and validate for auto-merge
          PR_NUMBER=$(gh pr list --state open --head ${branch_name} --json number --jq '.[0].number')
          if [ -z "$PR_NUMBER" ]; then
            echo "No pull request found. Exiting..."
            exit 1
          fi
          # Validate PR_NUMBER is a valid number
          if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "Invalid pull request number: $PR_NUMBER"
            exit 1
          fi

          # Auto-merge the pull request
          gh pr merge $PR_NUMBER --merge --delete-branch --body "[ci skip]"